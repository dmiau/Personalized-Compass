=====================
How to access rootViewController
=====================

AppDelegate has a property called rootViewController, and DesktopViewController can be accessed from there    
AppDelegate *temp = [[NSApplication sharedApplication] delegate];
temp.rootViewController = self; 


=====================
Build macros
=====================
All iOS devices have the macro __IPHONE__ defined


Coordinate system:

=====================
OSX View (u, v)
=====================
--------u
|
|
|
v

=====================
iOS (u, v), note: the coordinate system is flipped
=====================
v
|
|
|
--------u

=====================
OpenGL
=====================
y
|
|
------- x 
|
|
-y

These things are different:
self.render->compass_centroid
self.model->configurations[@"compass_centroid"]
self.model->compassCenterXY


Map convention:
(latitude, longitude)

iOS/OSX data exchange:

    NSDictionary *myDict = @{@"ulurbrbl" :
                        [NSData dataWithBytes:&(temp)
                                       length:sizeof(temp)],
                             @"latitude": [NSNumber numberWithDouble:
                                           [self.mapView centerCoordinate].latitude],
                             @"longitude": [NSNumber numberWithDouble:
                                           [self.mapView centerCoordinate].longitude]};

==================
Updates
==================
DesktopViewController.updateMapDisplayRegion

DesktopViewController.updateMainGUI{
	DesktopViewController.updateLocationVisibility
	model->updateMdl
	DesktopViewController.renderAnnotations
	compassView setNeedsDisplay:YES	
}                                        

==================
Design
==================

Snapshot:
The snapshot feature was created for debug and demo purposes. Later the snapshot feature is further extended for the purpose of user studies. A snapshot captures the current location, type of visualization, 

Param structure
name 
type

==================
Test Code Design
==================
phone:pcompass:t1:0c,29,0
phone:pcompass:t1:1c,639,0
phone:pcompass:t1:2c,893,0
phone:pcompass:t1:3c,1403,0
phone:pcompass:t1:4c,1751,0

code convention:
device:visualization:task:location_class-subID

Each t2 test has three corresponding locations.
phone:pcompass:t2:9f-0,5230,0
phone:pcompass:t2:9f-1,5230,0
phone:pcompass:t2:9f-2,5230,0

Some intermediate files will be generated during the process of test generation.
test.locations
allTestVectors.tests

==================
iOS emulation
==================
.kml and .snapshot generation
(assuming no rotation in tests)
- converts the coordinates in the test files (in iOS screen coordinates) to the coordinates in the OSX screen coordinates
- calculate map coordinates on OSX
- store all map coordinates to .kml and .snapshot
- store the latitude and longitude spans in .snapshots

display
iOS:
- display snapshot has been implemented
- OSX's load snapshot method need to convert latitude delta and longitude delta to the ones on the desktop.

==================
Test Manager
==================


==================
Test Manager Communication Protocol
==================
Need to have different types of packages for differnt purposes. 

if (env_setup_package){
	load the snapShot file, load the location file
}else{
	
}


Data package:
Type: Instruction, Message

- Instruction
*command: SetupEnv, LoadSnapshot, Start, SwitchControl, End, Sync
*parameter: filename, snapshot_id
*switchContorl: yes, no

- Message
* status: OK, BAD, NEXT
* notes:

































