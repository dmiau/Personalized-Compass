==================
configurations dictionary
==================


=====================
How to access rootViewController
=====================

AppDelegate has a property called rootViewController, and DesktopViewController can be accessed from there    
AppDelegate *temp = [[NSApplication sharedApplication] delegate];
temp.rootViewController = self; 


=====================
Build macros
=====================
All iOS devices have the macro __IPHONE__ defined


Coordinate system:

self.render->compass_centroid
self.model->configurations[@"compass_centroid"]
=====================
OSX CompassView (u, v)
=====================
v
|
|
|
--------u

=====================
OSX Map View (u, v) self.model->compassRefMapViewPoint [in MapView]
=====================
--------u
|
|
|
v

=====================
OpenGL
=====================
y
|
|
------- x 
|
|
-y


=====================
iOS GLK View and MapView
=====================
--------u
|
|
|
v

=====================
watch dimension
=====================
WxH: 568x255


These things are different:
These two are supposed to be the same [in OpenGL coordinate]
self.render->compass_centroid
self.model->configurations[@"compass_centroid"]

self.model->compassRefMapViewPoint [in MapView]

Map convention:
(latitude, longitude)

iOS/OSX data exchange:

    NSDictionary *myDict = @{@"ulurbrbl" :
                        [NSData dataWithBytes:&(temp)
                                       length:sizeof(temp)],
                             @"latitude": [NSNumber numberWithDouble:
                                           [self.mapView centerCoordinate].latitude],
                             @"longitude": [NSNumber numberWithDouble:
                                           [self.mapView centerCoordinate].longitude]};

==================
Updates
==================
DesktopViewController.updateMapDisplayRegion

DesktopViewController.updateMainGUI{
	DesktopViewController.updateLocationVisibility
	model->updateMdl
	DesktopViewController.resetAnnotations
	compassView setNeedsDisplay:YES	
}                                        

==================
Design
==================

Snapshot:
The snapshot feature was created for debug and demo purposes. Later the snapshot feature is further extended for the purpose of user studies. A snapshot captures the current location, type of visualization, 

Param structure
name 
type

==================
Test Code Design
==================
phone:pcompass:t1:0c,29,0
phone:pcompass:t1:1c,639,0
phone:pcompass:t1:2c,893,0
phone:pcompass:t1:3c,1403,0
phone:pcompass:t1:4c,1751,0

code convention:
device:visualization:task:location_class-subID

Each t2 test has three corresponding locations.
phone:pcompass:t2:9f-0,5230,0
phone:pcompass:t2:9f-1,5230,0
phone:pcompass:t2:9f-2,5230,0

Some intermediate files will be generated during the process of test generation.
test.locations
allTestVectors.tests

==================
iOS emulation
==================
.kml and .snapshot generation
(assuming no rotation in tests)
- converts the coordinates in the test files (in iOS screen coordinates) to the coordinates in the OSX screen coordinates
- calculate map coordinates on OSX
- store all map coordinates to .kml and .snapshot
- store the latitude and longitude spans in .snapshots

display
iOS:
- display snapshot has been implemented
- OSX's load snapshot method need to convert latitude delta and longitude delta to the ones on the desktop.

The wedge module plots a wedge wrt to the center of the view, and it assumes the center is at the origin (0,0). So in the case of iPhone emulation. If the center is shifted, the wedge module needs to know. Also, after a wedge is generated. It needs to be shifted. 

==================
Test Manager Communication Protocol
==================
Need to have different types of packages for differnt purposes. 

if (env_setup_package){
	load the snapShot file, load the location file
}else{
	
}


Data package:
Type: Instruction, Message

- Instruction (NSDictionary)
*Command: SetupEnv, LoadSnapshot, Start, SwitchControl, End, Sync
*Parameter: SnapshotID, YES, NO, Filename

- Message (NSString)
* Content: double (angle answer), Goodbye

==================
Data Generation
==================

Units of the provided data (as in testSpec.plist)

**Locate
Desktop

**Distance
iOS

**Orient:
Desktop

**Triangulate
iOS
**Locate+
iOS


==================
Wedge and Compass Constraints
==================

        //---------------------
        // Constraint of the watch mode
        //---------------------
        double max_leg = 0.0;
        
        // This part can be optimized later
        float radius = [model->configurations[@"watch_radius"] floatValue];
                
        float max_half_base = sqrt(pow(radius, 2) - pow(radius * 0.75, 2)) * 0.90;
        max_aperture = atan2(max_half_base, dist - radius * 0.75);
        max_leg = sqrt(pow(dist - radius*0.75, 2) + pow(max_half_base, 2));
        
        if (aperture > max_aperture){
            aperture = max_aperture;
            leg = max_leg;
        }

max intrusion 1/7 screen size
compass radius 1/8


















